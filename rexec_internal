#!/bin/bash

#TODO: fix issue with CVC4_REGRESSION_ARGS with multiple arguments
#TODO: don't rinstall when compilation fails: return value?
#TODO: -F to force reset/configure first
#TODO: COMMAND: clean-src: git clean remote src
#TODO: COMMAND: clone: git setup, auto-install dependencies?
#TODO: COMMAND: setup: configure local, git clone remote

# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% The client script

# usage: rexec_internal 
#   [local home directory] [remote machine] [remote home directory] 
#   [remote ssh host name] [command] [code sync options] [remote command options]

# ========================= static configuration
# the directory containing source trees $HOMEDIR/cvc4-*
HOMEDIR=$1
shift
# the remote machine
REMOTE=$1
shift
# the directory containing source trees $RHOMEDIR/cvc4-* on the remote machine
RHOMEDIR=$1
shift
# the directory containing the local build file structure
BASEBUILDROOT="build-cvc4"
BASEBUILDDIR="$HOMEDIR/$BASEBUILDROOT/"
# the name of the client script (this script)
THISEXEC="rexec"
# the name of the server script
SERVEREXEC="lexec_lnx"
# extra scp arguments
SCPAUXARGS="-P 40"
# ========================= end static configuration

# ================================================== shared method library
# Compute the git source info of directory $1
# Store result in $INFOSRC / $INFOSRCCOMMIT / $INFOSRCCHANGED / $INFOSTRING
function computeSrcInfo 
{
  echo "$THISEXEC: run: cd $1"
  cd $1
  echo "$THISEXEC: compute git information"
  INFOSRC=$(git status | grep -F "On branch ")
  INFOSRC=${INFOSRC#"On branch "}
  INFOSRCCOMMIT=$(git rev-parse HEAD)
  INFOSRCCHANGED=$(git status | grep -F "Changes not staged")
  if [ ! -z "$INFOSRCCHANGED" ]; then
    INFOSTRING="[$INFOSRC ${INFOSRCCOMMIT:0:8} (with modifications)]"
  else
    INFOSTRING="[$INFOSRC ${INFOSRCCOMMIT:0:8}]"
  fi
}
# Compute build information (binary name and configure options) for given build type $1 and optional source prefix $2
# Store result in $BINARYNAME / $CARGS
function computeBuildInfo
{
  BASEBINARYNAME="cvc4"
  if [ $1 = "prod" ]; then
    # production has the default prefix
    BINARYPREFIX=""
    CARGS="production --static --program-prefix="
  elif [ $1 = "debug" ]; then
    BINARYPREFIX="d-"
    CARGS="debug --static --no-unit-testing"
  elif [ $1 = "debug-lfsc" ]; then
    BINARYPREFIX="dl-"
    CARGS="debug --static --no-unit-testing --lfsc"
  elif [ $1 = "debug-unit" ]; then
    BINARYPREFIX="du-"
    CARGS="debug"
  elif [ $1 = "profile" ]; then
    BINARYPREFIX="prof-"
    CARGS="production --static --profiling"
  else
    echo "$THISEXEC: ERROR: unknown build type $1"
    exit 1
  fi
  # if there is a prefix
  if [ ! -z $2 ]; then
    # add the src prefix if it exists
    BINARYPREFIX="$BINARYPREFIX$2-"
  fi
  # add binary program prefix to configure arguments
  if [ ! -z $BINARYPREFIX ]; then
    CARGS=" --program-prefix=$BINARYPREFIX-"
  fi
  # binary name is used for remote install and double checking git scm
  BINARYNAME="$BINARYPREFIX$BASEBINARYNAME"
}
# ================================================== end shared method library


echo "=== $THISEXEC $@"
HOSTNAME=$1
shift
COMMAND=$1
shift

# ========================= compute source suffix
CURRDIR=$(pwd)
echo "$THISEXEC: This directory is $CURRDIR"
if [[ $CURRDIR != $BASEBUILDDIR* ]]; then
  echo "$THISEXEC: ERROR: not a build directory"
  exit 1;
fi
BUILDTYPE=$(basename "${CURRDIR}")
echo "$THISEXEC: Build type is $BUILDTYPE"
CURRDIR=$(dirname "${CURRDIR}")
SRCSUFFIXTMP=$(basename "${CURRDIR}")
LOCALSRCDIR="$HOMEDIR/cvc4"
if [ ! $SRCSUFFIXTMP = "$BASEBUILDROOT" ]; then
  SRCSUFFIX="$SRCSUFFIXTMP"
  LOCALSRCDIR="$LOCALSRCDIR-$SRCSUFFIX"
  CURRDIR=$(dirname "${CURRDIR}")
  CURRDIR=$(basename "${CURRDIR}")
  if [ ! $CURRDIR = "$BASEBUILDROOT" ]; then
    echo "$THISEXEC: ERROR: unexpected build directory $CURRDIR"
    exit 1;
  fi
fi
echo "$THISEXEC: source suffix is \"$SRCSUFFIX\""
# ========================= end compute source suffix


# ========================= get information about local source (pre-sync)
computeSrcInfo $LOCALSRCDIR
echo "==============================================="
echo "LOCAL SOURCE: $INFOSTRING"
echo "==============================================="
# ========================= end get information about local source (pre-sync)


# ========================= code syncronization method
if [ X$1 = X'-B' ] || [ $COMMAND = "checkout" ]; then

  # note that -b BRANCHNAME is a remote change branch, -B changes both local and remote
  if [ ! -z "$INFOSRCCHANGED" ]; then
    echo "$THISEXEC: ERROR: Cannot change branches, local changes not commited."
    exit 1
  fi
  if [ $COMMAND = "checkout" ]; then
    # local checkout command becomes none command on remote
    COMMAND="none"
  fi
  # checkout a fresh copy of a different branch on local and remote
  BRANCHNAME=$2
  shift
  shift
  # checkout locally
  echo "$THISEXEC: run: git checkout $BRANCHNAME"
  if ! git checkout $BRANCHNAME; then
    echo "$THISEXEC: ERROR: failed to checkout $BRANCHNAME"
    exit 1;
  fi
  # will also update branch on remote
  LEXECAUXARGS="-b $BRANCHNAME"
  # ensure git information is up-to-date
  computeSrcInfo $LOCALSRCDIR
  
elif [ X$1 = X'-c' ]; then

  if [ -z "$INFOSRCCHANGED" ]; then
    echo "$THISEXEC: ERROR: No changes to commit."
    exit 1
  elif [ $INFOSRC = "master" ]; then
    echo "$THISEXEC: ERROR: Cannot commit to master branch."
    exit 1
  fi
  # git commit locally, and git rebase remote
  COMMITMSG=$2
  shift
  shift
  echo "$THISEXEC: run: git commit -a -m \"$COMMITMSG\""
  git commit -a -m "$COMMITMSG"
  echo "$THISEXEC: run: git push"
  git push
  # force rebase on remote machine
  LEXECAUXARGS="-r"
  # ensure git information is up-to-date
  computeSrcInfo $LOCALSRCDIR
  
elif [ X$1 = X'-s' ]; then

  if [ -z "$INFOSRCCHANGED" ]; then
    # can happen if sent modified copy and then reverted
    echo "$THISEXEC: WARNING: There are no local changes, but sync anyways."
  fi
  
  # syncronize the local state of the code to the remote machine without git
  SYNCTYPE=$2
  shift
  shift
  echo "$THISEXEC: run: mksync_code $HOMEDIR $REMOTE $RHOMEDIR $SYNCTYPE $SRCSUFFIX"
  if ! mksync_code $HOMEDIR $REMOTE $RHOMEDIR $SYNCTYPE $SRCSUFFIX; then
    echo "$THISEXEC: ERROR: failed to syncronize source"
    exit 1;
  fi
  # indicate to remote that we have sync
  LEXECLOCALINFO="-lsync"
  
fi
# ========================= end code syncronization method



# ========================= compute information on how to call remote
LEXECARGS="$BUILDTYPE"
if [ ! -z $SRCSUFFIX ]; then
  LEXECARGS="$LEXECARGS -p $SRCSUFFIX"
fi
computeBuildInfo $BUILDTYPE $SRCSUFFIX
echo "$THISEXEC: computeBuildInfo: binary name is $BINARYNAME"
#echo "$THISEXEC: computeBuildInfo: configure arguments are $CARGS"
# indicate local branch name
if [ ! -z $INFOSRC ]; then
  LEXECLOCALINFO="$LEXECLOCALINFO -lbranch $INFOSRC"
fi
# indicate local commit name
if [ ! -z $INFOSRCCOMMIT ]; then
  LEXECLOCALINFO="$LEXECLOCALINFO -lcommit ${INFOSRCCOMMIT:0:8}"
fi
if [ -z "$INFOSRCCHANGED" ]; then
  LEXECLOCALINFO="$LEXECLOCALINFO -lnomod"
fi
# local info is copied to remote
LEXECARGS="$LEXECARGS $LEXECLOCALINFO"
# ========================= end compute information on how to call remote


# ========================= run the command
if [ -z $COMMAND ]; then
  echo "$THISEXEC: ERROR: no command specified"
  exit 1
fi
echo "==============================================="
echo "SEND COMMAND: $COMMAND $LEXECAUXARGS $@"
echo "LOCAL SOURCE: $INFOSTRING"
echo "==============================================="
# check valid command
if ! [[ "$COMMAND" =~ ^(install-server|install-file|rinstall|install|regress|ctest|configure|units|clean|reset|reset-all|info|exec|none)$ ]]; then
  echo "$THISEXEC: ERROR: unknown command $COMMAND"
  exit 1
fi

if [ $COMMAND = "install-server" ]; then

  # install the server script on the remote machine
  echo "$THISEXEC: run: scp $SCPAUXARGS $HOMEDIR/bin/$SERVEREXEC $REMOTE:$RHOMEDIR/bin"
  scp $SCPAUXARGS $HOMEDIR/bin/$SERVEREXEC $REMOTE:$RHOMEDIR/bin

elif [ $COMMAND = "install-file" ]; then

  # install custom file
  FILENAME=$1
  shift

  # install the server script on the remote machine
  echo "$THISEXEC: run: scp $SCPAUXARGS $HOMEDIR/bin/$FILENAME $REMOTE:$RHOMEDIR/bin"
  scp $SCPAUXARGS $HOMEDIR/bin/$FILENAME $REMOTE:$RHOMEDIR/bin
  
elif [ $COMMAND = "rinstall" ]; then

  # remote install to local machine
  echo "$THISEXEC: issue remote install command"
  echo "$THISEXEC: run: ssh $HOSTNAME $SERVEREXEC $LEXECARGS install $LEXECAUXARGS $@"
  ssh $HOSTNAME $SERVEREXEC $LEXECARGS install $LEXECAUXARGS $@
  # scp the binary
  echo "$THISEXEC: issue binary copy command"
  echo "$THISEXEC: run: scp $SCPAUXARGS $REMOTE:$RHOMEDIR/bin/$BINARYNAME $HOMEDIR/bin/"
  scp $SCPAUXARGS $REMOTE:$RHOMEDIR/bin/$BINARYNAME $HOMEDIR/bin/

else

  # all other commands passed unchanged
  echo "$THISEXEC: issue remote command"
  echo "$THISEXEC: run: ssh $HOSTNAME $SERVEREXEC $LEXECARGS $COMMAND $LEXECAUXARGS $@"
  ssh $HOSTNAME $SERVEREXEC $LEXECARGS $COMMAND $LEXECAUXARGS $@
  
fi
# ========================= end run the command

echo "$THISEXEC: Finished $@"
